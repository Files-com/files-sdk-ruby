# File Uploading

In order to support huge files (up to 5TB), the procedure to upload files via the REST API requires multiple steps. We will explain the procedure here.

**If you are using an SDK, you do not need to worry about any of this process, it's all handled for you by the SDK.**

## REST API upload steps

Uploading files using the REST API is done in 3 stages:

1. [Start a new upload](#starting-a-new-upload) by sending a request to REST API to indicate intent to upload a file.
2. [Upload the file](#uploading-the-file-or-file-parts) to the URL(s) provided by the REST API, possibly in parts via multiple uploads.
3. [Complete the upload](#completing-an-upload) by notifying the REST API that the file upload has completed.

## The upload object

<table>
  <thead>
    <tr>
      <th>Attribute</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>ref <em>string</em></td>
      <td>Unique identifier to reference this file upload. This identifier is needed for subsequent requests to the REST API to complete the upload or request more upload URLs.</td>
    </tr>
    <tr>
      <td>http_method <em>string</em></td>
      <td>Value is PUT or POST, and is the HTTP method used when uploading the file to S3 at the <code>upload_uri</code>.</td>
    </tr>
    <tr>
      <td>upload_uri <em>string</em></td>
      <td>The URL where the file is uploaded to.</td>
    </tr>
    <tr>
      <td>partsize <em>integer</em></td>
      <td>Recommended size of upload. When uploading file pieces, the piece sizes are required to be between 5 MB and 5 GB (except the last part). This value provides a recommended size to upload for this part without adding another part.</td>
    </tr>
    <tr>
      <td>part_number <em>integer</em></td>
      <td>Number of this part, which is always between 1 and 10,000, and will always be 1 for the first upload URL at the beginning of uploading a new file.</td>
    </tr>
    <tr>
      <td>available_parts <em>integer</em></td>
      <td>Number of parts available for this upload. For new file uploads this value is always 10,000, but it may be smaller for other uploads. When requesting more upload URLs from the REST API, the part numbers must be between 1 and this number.</td>
    </tr>
    <tr>
      <td>headers <em>key-value pairs</em></td>
      <td>A list of required headers and their exact values to send in the file upload. It may be empty if no headers with fixed values are required.</td>
    </tr>
    <tr>
      <td>parameters <em>key-value pairs</em></td>
      <td>A list of required parameters and their exact values to send in the file upload. If any values are in this array, it is implied that the upload request is formatted appropriately to send form data parameters. It will always be empty if the body of the request is specified to be where the file upload data goes (see <code>send</code> below).</td>
    </tr>
    <tr>
      <td>send <em>key-value pairs</em></td>
      <td>
        This is an array of values to be sent in the file upload request. Possible sub-values are <code>partsize</code>, <code>partdata</code>, <code>file</code>, and <code>Content-Type</code>:
        <ul>
          <li><code>file</code>: where to put the file data for the entire file upload</li>
          <li><code>partdata</code>: where to put the file data for this part</li>
          <li><code>partsize</code>: where to put the size of the upload for this file part</li>
          <li><code>Content-Type</code>: where to put the Content-Type of the file (which can have no bearing on the file's actual type)</li>
        </ul>
        Possible values for these parameters:
        <ul>
          <li><code>body</code>: this information is the body of the PUT or POST request</li>
          <li><code>required-header &lt;header name&gt;</code>: this information goes in the named header</li>
          <li><code>required-parameter &lt;parameter name&gt;</code>: this information goes in the named parameter, and implies this request is formatted appropriately to send form data parameters</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td>path <em>string</em></td>
      <td>Intended destination path of the file upload. Path may change upon finalization, depending on existance of another upload to the same location and the site's overwrite setting.</td>
    </tr>
    <tr>
      <td>action <em>string</em></td>
      <td>Value is always <code>write</code> or <code>put</code> for this action.</td>
    </tr>
    <tr>
      <td>ask_about_overwrites <em>boolean</em></td>
      <td>If true, a file by this name already exists and will be overwritten when this upload completes if it continues.</td>
    </tr>
  </tbody>
</table>


## Starting a new upload

> Example Request

```shell--json
curl https://SUBDOMAIN.files.com/api/rest/v1/files/NewFile.txt \
  -u YOUR_API_KEY:x \
  -X POST \
  -H 'Content-Type: application/json' \
  -H 'Accept: application/json' \
  -d '{
        "action": "put"
      }'
```

```shell--xml
curl https://SUBDOMAIN.files.com/api/rest/v1/files/NewFile.txt \
  -u YOUR_API_KEY:x \
  -X POST \
  -H 'Content-Type: application/xml' \
  -H 'Accept: application/xml' \
  -d '<file>
        <action>put</action>
      </file>'
```

> Example Response

```json
{
  "ref": "put-378670",
  "path": "NewFile.txt",
  "action": "put/write",
  "ask_about_overwrites": false,
  "http_method": "PUT",
  "upload_uri": "https://example-upload-proxy-url.com/path/6eee7ad0-bf75-0131-71fc-0eeabbd7a8b4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20140516%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20140516T221456Z&X-Amz-Expires=180&X-Amz-SignedHeaders=host&partNumber=1&uploadId=xQDI8q.aDdWdWIvSpRGLOFqnPQqJoMGZ88r9g_q7z2gW6U4rNZx8Zb_Wh9m07TDJM1x4rCTM18UCzdXaYjJu.SBH89LAiA4ye698TfMPyam4BO7ifs7HLuiBPrEW.zIz&X-Amz-Signature=69bc7be37c8c42096e78aa4ff752f073ea890481c5f76eac5ad40a5ab9466997",
  "partsize":5242880,
  "part_number":1,
  "available_parts":10000,
  "send": {
    "partsize": "required-parameter Content-Length",
    "partdata": "body"
  },
  "headers": {},
  "parameters": {}
}
```

```xml
<?xml version="1.0" encoding="UTF-8"?>
<upload>
  <ref>put-378670</ref>
  <path>NewFile.txt</path>
  <action>put/write</action>
  <ask_about_overwrites type="boolean">false</ask_about_overwrites>
  <http_method>PUT</http_method>
  <upload_uri>https://example-upload-proxy-url.com/path/6eee7ad0-bf75-0131-71fc-0eeabbd7a8b4?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20140516%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20140516T221456Z&amp;X-Amz-Expires=180&amp;X-Amz-SignedHeaders=host&amp;partNumber=1&amp;uploadId=xQDI8q.aDdWdWIvSpRGLOFqnPQqJoMGZ88r9g_q7z2gW6U4rNZx8Zb_Wh9m07TDJM1x4rCTM18UCzdXaYjJu.SBH89LAiA4ye698TfMPyam4BO7ifs7HLuiBPrEW.zIz&amp;X-Amz-Signature=69bc7be37c8c42096e78aa4ff752f073ea890481c5f76eac5ad40a5ab9466997</upload_uri>
  <partsize type="integer">5242880</partsize>
  <part_number type="integer">1</part_number>
  <available_parts type="integer">10000</available_parts>
  <send>
    <partsize>required-parameter Content-Length</partsize>
    <partdata>body</partdata>
  </send>
  <headers></headers>
  <parameters></parameters>
</upload>
```

The first request to upload a new file is a **POST** request to `/files/PATH_AND_FILENAME.EXT` with an `action` parameter with the value of `put`.

### HTTP Request

`POST /files/:path_and_filename`

## Uploading the file or file parts

> Example Request

```shell
curl "https://example-upload-proxy-url.com/path/6eee7ad0-bf75-0131-71fc-0eeabbd7a8b4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20140516%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20140516T221456Z&X-Amz-Expires=180&X-Amz-SignedHeaders=host&partNumber=1&uploadId=xQDI8q.aDdWdWIvSpRGLOFqnPQqJoMGZ88r9g_q7z2gW6U4rNZx8Zb_Wh9m07TDJM1x4rCTM18UCzdXaYjJu.SBH89LAiA4ye698TfMPyam4BO7ifs7HLuiBPrEW.zIz&X-Amz-Signature=69bc7be37c8c42096e78aa4ff752f073ea890481c5f76eac5ad40a5ab9466997" \
  --upload-file filename.ext
```

At this point, you are to send a **PUT** request to the returned `upload_uri` with the file data, along with the headers and parameters provided to you from Files.com.

The `upload_uri` link is signed by Files.com and must be used within 15 minutes. You will receive an HTTP 200 response with no body upon successful upload.

Should you wish to upload the file in multiple parts (required if the file size exceeds 5 GB) you will need to [request an additional upload URL](#requesting-additional-upload-urls) for the next part.

## Requesting additional upload URLs

> Example Request

```shell--json
curl https://SUBDOMAIN.files.com/api/rest/v1/files/NewFile.txt \
  -u YOUR_API_KEY:x \
  -X POST \
  -H 'Content-Type: application/json' \
  -H 'Accept: application/json' \
  -d '{
        "action": "put",
        "ref": "put-378670",
        "part": 2
      }'
```

```shell--xml
curl https://SUBDOMAIN.files.com/api/rest/v1/files/NewFile.txt \
  -u YOUR_API_KEY:x \
  -X POST \
  -H 'Content-Type: application/xml' \
  -H 'Accept: application/xml' \
  -d '<file>
        <action>put</action>
        <ref>put-378670</ref>
        <part>2</part>
      </file>'
```

> Example Response

```json
{
  "ref": "put-378670",
  "path": "NewFile.txt",
  "action": "put/write",
  "ask_about_overwrites": false,
  "http_method": "PUT",
  "upload_uri": "https://example-upload-proxy-url.com/path/6eee7ad0-bf75-0131-71fc-0eeabbd7a8b4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20140516%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20140516T221456Z&X-Amz-Expires=180&X-Amz-SignedHeaders=host&partNumber=2&uploadId=xQDI8q.aDdWdWIvSpRGLOFqnPQqJoMGZ88r9g_q7z2gW6U4rNZx8Zb_Wh9m07TDJM1x4rCTM18UCzdXaYjJu.SBH89LAiA4ye698TfMPyam4BO7ifs7HLuiBPrEW.zIz&X-Amz-Signature=57c440731898fb55c6866af734757185dbbccba7741259ade453c30120e32c6h",
  "partsize":5242880,
  "part_number":2,
  "available_parts":10000,
  "send": {
    "partsize": "required-parameter Content-Length",
    "partdata": "body"
  },
  "headers": {},
  "parameters": {}
}
```

```xml
<?xml version="1.0" encoding="UTF-8"?>
<upload>
  <ref>put-378670</ref>
  <path>NewFile.txt</path>
  <action>put/write</action>
  <ask_about_overwrites type="boolean">false</ask_about_overwrites>
  <http_method>PUT</http_method>
  <upload_uri>https://example-upload-proxy-url.com/path/6eee7ad0-bf75-0131-71fc-0eeabbd7a8b4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20140516%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20140516T221456Z&X-Amz-Expires=180&X-Amz-SignedHeaders=host&partNumber=2&uploadId=xQDI8q.aDdWdWIvSpRGLOFqnPQqJoMGZ88r9g_q7z2gW6U4rNZx8Zb_Wh9m07TDJM1x4rCTM18UCzdXaYjJu.SBH89LAiA4ye698TfMPyam4BO7ifs7HLuiBPrEW.zIz&X-Amz-Signature=57c440731898fb55c6866af734757185dbbccba7741259ade453c30120e32c6h</upload_uri>
  <partsize type="integer">5242880</partsize>
  <part_number type="integer">2</part_number>
  <available_parts type="integer">10000</available_parts>
  <send>
    <partsize>required-parameter Content-Length</partsize>
    <partdata>body</partdata>
  </send>
  <headers></headers>
  <parameters></parameters>
</upload>
```

Once an upload has been opened and before it is completed, additional upload URLs can be requested from the REST API. Send a **POST** request to `/files/PATH_AND_FILENAME.EXT` with parameter `action` set to `put`, parameter `ref` set to the reference ID returned at the start of the upload, and parameter `part` set to the part number the upload URL should refer to. The part number can be the same as one previously used if a new URL is required, either because the part is to be re-uploaded or because a prior upload attempt failed and the prior URL’s signature has expired.

### HTTP Request

`POST /files/:path_and_filename`

## Completing an upload

> Example Request

```shell--json
curl https://SUBDOMAIN.files.com/api/rest/v1/files/NewFile.txt \
  -u YOUR_API_KEY:x \
  -X POST \
  -H 'Content-Type: application/json' \
  -H 'Accept: application/json' \
  -d '{
        "action": "end",
        "ref": "put-378670"
      }'
```

```shell--xml
curl https://SUBDOMAIN.files.com/api/rest/v1/files/NewFile.txt \
  -u YOUR_API_KEY:x \
  -X POST \
  -H 'Content-Type: application/xml' \
  -H 'Accept: application/xml' \
  -d '<file>
        <action>end</action>
        <ref>put-378670</ref>
      </file>'
```

> Example Response

```json
{
  "id": 1020304050,
  "path": "NewFile.txt",
  "display_name": "NewFile.txt",
  "type": "file",
  "size": 412,
  "mtime": "2014-05-17T05:14:35+00:00",
  "provided_mtime": null,
  "crc32": null,
  "md5": null,
  "region":"us-east-1",
  "permissions": "rwd"
}
```

```xml
<?xml version="1.0" encoding="UTF-8"?>
<file>
  <id type="integer">1020304050</id>
  <path>NewFile.txt</path>
  <display_name>NewFile.txt</display_name>
  <type>file</type>
  <size type="integer">412</size>
  <mtime type="datetime">2014-05-17T05:14:35+00:00</mtime>
  <provided_mtime nil="true"/>
  <crc32 nil="true"/>
  <md5 nil="true"/>
  <region>us-east-1</region>
  <permissions>rwd</permissions>
</file>
```

After uploading the file to the file storage environment, the REST API needs to be notified that the upload was completed. This is done by sending another **POST** request to `/files/PATH_AND_FILENAME.EXT` with parameter `action` set to `end` and parameter `ref` set to the reference ID returned at the start of the upload.

### HTTP Request

`POST /files/:path_and_filename`
