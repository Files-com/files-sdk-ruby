# Messages

Messages are part of Files.com's project management features and represent a message posted by a user to a project.


## The Message object

> Example Message Object

```json
{
  "id": 1,
  "subject": "Files.com Account Upgrade",
  "body": "We should upgrade our Files.com account!",
  "comments": [

  ]
}
```

```xml
<?xml version="1.0" encoding="UTF-8"?>
<message>
  <id type="integer">1</id>
  <subject>Files.com Account Upgrade</subject>
  <body>We should upgrade our Files.com account!</body>
  <comments type="array"/>
</message>

```

Attribute | Description
--------- | -----------
  id *int64* | Message ID 
  subject *string* | Message subject. 
  body *string* | Message body. 
  comments *array* | Comments. 
  user_id *int64* | User ID.  Provide a value of `0` to operate the current session's user. 
  project_id *int64* | Project to attach the message to. 

## List Messages


> Example Request

```shell--json
curl "https://app.files.com/api/rest/v1/messages.json?user_id=1&page=1&per_page=1&project_id=1" \
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```shell--xml
curl "https://app.files.com/api/rest/v1/messages.xml?user_id=1&page=1&per_page=1&project_id=1" \
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```ruby
Files.api_key = 'YOUR_API_KEY'

Files::Message.list(
  user_id: 1, 
  page: 1, 
  per_page: 1, 
  project_id: 1
)
```

```php
\Files\Files::setApiKey('YOUR_API_KEY');

\Files\Message::list(array(
  'user_id' => 1, 
  'page' => 1, 
  'per_page' => 1, 
  'project_id' => 1
));
```

> Example Response

```json
[
  {
    "id": 1,
    "subject": "Files.com Account Upgrade",
    "body": "We should upgrade our Files.com account!",
    "comments": [

    ]
  }
]
```

```xml
<?xml version="1.0" encoding="UTF-8"?>
<messages type="array">
  <message>
    <id type="integer">1</id>
    <subject>Files.com Account Upgrade</subject>
    <body>We should upgrade our Files.com account!</body>
    <comments type="array"/>
  </message>
</messages>

```


### HTTPS Request

`GET /messages`

### Authentication Required

Available to all authenticated keys or sessions.



### Request Parameters

Parameter | Description
--------- | --------- | -----------
user_id *int64*  | User ID.  Provide a value of `0` to operate the current session's user. 
page *int64*  | Current page number. 
per_page *int64*  | Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended). 
action *string*  | Deprecated: If set to `count` returns a count of matching records rather than the records themselves. 
project_id *int64* **Required** | Project to return messages for. 
## Show Message


> Example Request

```shell--json
curl https://app.files.com/api/rest/v1/messages/{id}.json \
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```shell--xml
curl https://app.files.com/api/rest/v1/messages/{id}.xml \
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```ruby
Files.api_key = 'YOUR_API_KEY'

Files::Message.find(id)
```

```php
\Files\Files::setApiKey('YOUR_API_KEY');

\Files\Message::find($id);
```

> Example Response

```json
{
  "id": 1,
  "subject": "Files.com Account Upgrade",
  "body": "We should upgrade our Files.com account!",
  "comments": [

  ]
}
```

```xml
<?xml version="1.0" encoding="UTF-8"?>
<message>
  <id type="integer">1</id>
  <subject>Files.com Account Upgrade</subject>
  <body>We should upgrade our Files.com account!</body>
  <comments type="array"/>
</message>

```


### HTTPS Request

`GET /messages/{id}`

### Authentication Required

Available to all authenticated keys or sessions.



### Request Parameters

Parameter | Description
--------- | --------- | -----------
id *int64* **Required** | Message ID. 
## Create Message


> Example Request

```shell--json
curl https://app.files.com/api/rest/v1/messages.json \
  -X POST \
  -H 'Content-Type: application/json' \
  -d '{"user_id":1,"project_id":1,"subject":"subject","body":"body"}' \
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```shell--xml
curl https://app.files.com/api/rest/v1/messages.xml \
  -X POST \
  -H 'Content-Type: application/xml' \
  -d '<message>
       <user_id type="integer">1</user_id>
       <project_id type="integer">1</project_id>
       <subject>subject</subject>
       <body>body</body>
     </message>'
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```ruby
Files.api_key = 'YOUR_API_KEY'

Files::Message.create(
  user_id: 1, 
  project_id: 1, 
  subject: "subject", 
  body: "body"
)
```

```php
\Files\Files::setApiKey('YOUR_API_KEY');

\Files\Message::create(array(
  'user_id' => 1, 
  'project_id' => 1, 
  'subject' => "subject", 
  'body' => "body"
));
```

> Example Response

```json
{
  "id": 1,
  "subject": "Files.com Account Upgrade",
  "body": "We should upgrade our Files.com account!",
  "comments": [

  ]
}
```

```xml
<?xml version="1.0" encoding="UTF-8"?>
<message>
  <id type="integer">1</id>
  <subject>Files.com Account Upgrade</subject>
  <body>We should upgrade our Files.com account!</body>
  <comments type="array"/>
</message>

```


### HTTPS Request

`POST /messages`

### Authentication Required

Available to all authenticated keys or sessions.



### Request Parameters

Parameter | Description
--------- | --------- | -----------
user_id *int64*  | User ID.  Provide a value of `0` to operate the current session's user. 
project_id *int64* **Required** | Project to attach the message to. 
subject *string* **Required** | Message subject. 
body *string* **Required** | Message body. 
## Update Message


> Example Request

```shell--json
curl https://app.files.com/api/rest/v1/messages/{id}.json \
  -X PATCH \
  -H 'Content-Type: application/json' \
  -d '{"project_id":1,"subject":"subject","body":"body"}' \
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```shell--xml
curl https://app.files.com/api/rest/v1/messages/{id}.xml \
  -X PATCH \
  -H 'Content-Type: application/xml' \
  -d '<message>
       <project_id type="integer">1</project_id>
       <subject>subject</subject>
       <body>body</body>
     </message>'
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```ruby
Files.api_key = 'YOUR_API_KEY'

message = Files::Message.find(id)
message.update(
  project_id: 1,
  subject: "subject",
  body: "body"
)
```

```php
\Files\Files::setApiKey('YOUR_API_KEY');

$message = \Files\Message->find(1);
$message->update(array(
  'project_id' => 1, 
  'subject' => "subject", 
  'body' => "body"
));
```

> Example Response

```json
{
  "id": 1,
  "subject": "Files.com Account Upgrade",
  "body": "We should upgrade our Files.com account!",
  "comments": [

  ]
}
```

```xml
<?xml version="1.0" encoding="UTF-8"?>
<message>
  <id type="integer">1</id>
  <subject>Files.com Account Upgrade</subject>
  <body>We should upgrade our Files.com account!</body>
  <comments type="array"/>
</message>

```


### HTTPS Request

`PATCH /messages/{id}`

### Authentication Required

Available to all authenticated keys or sessions.



### Request Parameters

Parameter | Description
--------- | --------- | -----------
id *int64* **Required** | Message ID. 
project_id *int64* **Required** | Project to attach the message to. 
subject *string* **Required** | Message subject. 
body *string* **Required** | Message body. 
## Delete Message


> Example Request

```shell--json
curl https://app.files.com/api/rest/v1/messages/{id}.json \
  -X DELETE \
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```shell--xml
curl https://app.files.com/api/rest/v1/messages/{id}.xml \
  -X DELETE \
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```ruby
Files.api_key = 'YOUR_API_KEY'

message = Files::Message.find(id)
message.delete
```

```php
\Files\Files::setApiKey('YOUR_API_KEY');

$message = \Files\Message->find(1);
$message->delete();
```

> Example Response

```json
No response.
```

```xml
No response.
```


### HTTPS Request

`DELETE /messages/{id}`

### Authentication Required

Available to all authenticated keys or sessions.



### Request Parameters

Parameter | Description
--------- | --------- | -----------
id *int64* **Required** | Message ID. 

