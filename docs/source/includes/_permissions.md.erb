# Permissions

Permission objects represent the grant of permissions to a user or group.

They are specific to a path and can be either recursive or nonrecursive into the subfolders of that path.


## The Permission object

> Example Permission Object

```json
{
  "id": 1,
  "path": "",
  "user_id": 1,
  "username": "Sser",
  "group_id": 1,
  "group_name": "",
  "permission": "full",
  "recursive": true
}
```

```xml
<?xml version="1.0" encoding="UTF-8"?>
<permission>
  <id type="integer">1</id>
  <path></path>
  <user_id type="integer">1</user_id>
  <username>Sser</username>
  <group_id type="integer">1</group_id>
  <group_name></group_name>
  <permission>full</permission>
  <recursive type="boolean">true</recursive>
</permission>

```

Attribute | Description
--------- | -----------
  id *int64* | Permission ID 
  path *string* | Folder path This must be slash-delimited, but it must neither start nor end with a slash. Maximum of 5000 characters. 
  user_id *int64* | User ID 
  username *string* | User's username 
  group_id *int64* | Group ID 
  group_name *string* | Group name if applicable 
  permission *string* | Permission type <div>Possible values: `full`, `readonly`, `writeonly`, `previewonly`, `history`, `admin`</div>
  recursive *boolean* | Does this permission apply to subfolders? 

## List Permissions


> Example Request

```shell--json
curl "https://app.files.com/api/rest/v1/permissions.json?page=1&per_page=1&group_id=1&user_id=1&include_groups=true" \
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```shell--xml
curl "https://app.files.com/api/rest/v1/permissions.xml?page=1&per_page=1&group_id=1&user_id=1&include_groups=true" \
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```ruby
Files.api_key = 'YOUR_API_KEY'

Files::Permission.list(path, 
  page: 1, 
  per_page: 1, 
  group_id: 1, 
  user_id: 1, 
  include_groups: true
)
```

```php
\Files\Files::setApiKey('YOUR_API_KEY');

\Files\Permission::list($path, array(
  'page' => 1, 
  'per_page' => 1, 
  'group_id' => 1, 
  'user_id' => 1, 
  'include_groups' => true
));
```

> Example Response

```json
[
  {
    "id": 1,
    "path": "",
    "user_id": 1,
    "username": "Sser",
    "group_id": 1,
    "group_name": "",
    "permission": "full",
    "recursive": true
  }
]
```

```xml
<?xml version="1.0" encoding="UTF-8"?>
<permissions type="array">
  <permission>
    <id type="integer">1</id>
    <path></path>
    <user_id type="integer">1</user_id>
    <username>Sser</username>
    <group_id type="integer">1</group_id>
    <group_name></group_name>
    <permission>full</permission>
    <recursive type="boolean">true</recursive>
  </permission>
</permissions>

```


### HTTPS Request

`GET /permissions`

### Authentication Required

Available to all authenticated keys or sessions.



### Request Parameters

Parameter | Description
--------- | --------- | -----------
page *int64*  | Current page number. 
per_page *int64*  | Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended). 
action *string*  | Deprecated: If set to `count` returns a count of matching records rather than the records themselves. 
path *string*  | Permission path.  If provided, will scope permissions to this path. 
group_id *string*  | Group ID.  If provided, will scope permissions to this group. 
user_id *string*  | User ID.  If provided, will scope permissions to this user. 
include_groups *boolean*  | If searching by user or group, also include user's permissions that are inherited from its groups? 
## Create Permission


> Example Request

```shell--json
curl https://app.files.com/api/rest/v1/permissions.json \
  -X POST \
  -H 'Content-Type: application/json' \
  -d '{"group_id":1,"permission":"full","recursive":true,"user_id":1,"username":"Sser"}' \
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```shell--xml
curl https://app.files.com/api/rest/v1/permissions.xml \
  -X POST \
  -H 'Content-Type: application/xml' \
  -d '<permission>
       <group_id type="integer">1</group_id>
       <permission>full</permission>
       <recursive type="boolean">true</recursive>
       <user_id type="integer">1</user_id>
       <username>Sser</username>
     </permission>'
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```ruby
Files.api_key = 'YOUR_API_KEY'

Files::Permission.create(path, 
  group_id: 1, 
  permission: "full", 
  recursive: true, 
  user_id: 1, 
  username: "Sser"
)
```

```php
\Files\Files::setApiKey('YOUR_API_KEY');

\Files\Permission::create($path, array(
  'group_id' => 1, 
  'permission' => "full", 
  'recursive' => true, 
  'user_id' => 1, 
  'username' => "Sser"
));
```

> Example Response

```json
{
  "id": 1,
  "path": "",
  "user_id": 1,
  "username": "Sser",
  "group_id": 1,
  "group_name": "",
  "permission": "full",
  "recursive": true
}
```

```xml
<?xml version="1.0" encoding="UTF-8"?>
<permission>
  <id type="integer">1</id>
  <path></path>
  <user_id type="integer">1</user_id>
  <username>Sser</username>
  <group_id type="integer">1</group_id>
  <group_name></group_name>
  <permission>full</permission>
  <recursive type="boolean">true</recursive>
</permission>

```


### HTTPS Request

`POST /permissions`

### Authentication Required

Available to all authenticated keys or sessions.



### Request Parameters

Parameter | Description
--------- | --------- | -----------
group_id *int64*  | Group ID 
path *string*  | Folder path 
permission *string*  |  Permission type.  Can be `admin`, `full`, `readonly`, `writeonly`, `previewonly`, or `history` 
recursive *boolean*  | Apply to subfolders recursively? 
user_id *int64*  | User ID.  Provide `username` or `user_id` 
username *string*  | User username.  Provide `username` or `user_id` 
## Delete Permission


> Example Request

```shell--json
curl https://app.files.com/api/rest/v1/permissions/{id}.json \
  -X DELETE \
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```shell--xml
curl https://app.files.com/api/rest/v1/permissions/{id}.xml \
  -X DELETE \
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```ruby
Files.api_key = 'YOUR_API_KEY'

Files::Permission.delete(id)
```

```php
\Files\Files::setApiKey('YOUR_API_KEY');

\Files\Permission::delete($id);
```

> Example Response

```json
No response.
```

```xml
No response.
```


### HTTPS Request

`DELETE /permissions/{id}`

### Authentication Required

Available to all authenticated keys or sessions.



### Request Parameters

Parameter | Description
--------- | --------- | -----------
id *int64* **Required** | Permission ID. 

