# Requests

A Request represents a file that *should* be uploaded by a specific user or group.

Requests can either be manually created and managed, or managed automatically by an Automation.


## The Request object

> Example Request Object

```json
{
  "id": 1,
  "path": "",
  "source": "",
  "destination": "",
  "automation_id": "",
  "user_display_name": ""
}
```

```xml
<?xml version="1.0" encoding="UTF-8"?>
<request>
  <id type="integer">1</id>
  <path></path>
  <source></source>
  <destination></destination>
  <automation_id></automation_id>
  <user_display_name></user_display_name>
</request>

```

Attribute | Description
--------- | -----------
  id *int64* | Request ID 
  path *string* | Folder path This must be slash-delimited, but it must neither start nor end with a slash. Maximum of 5000 characters. 
  source *string* | Source filename, if applicable 
  destination *string* | Destination filename 
  automation_id *string* | ID of automation that created request 
  user_display_name *string* | User making the request (if applicable) 
  user_ids *string* | A list of user IDs to request the file from. If sent as a string, it should be comma-delimited. 
  group_ids *string* | A list of group IDs to request the file from. If sent as a string, it should be comma-delimited. 

## List Requests


> Example Request

```shell--json
curl "https://app.files.com/api/rest/v1/requests.json?page=1&per_page=1&mine=true" \
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```shell--xml
curl "https://app.files.com/api/rest/v1/requests.xml?page=1&per_page=1&mine=true" \
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```ruby
Files.api_key = 'YOUR_API_KEY'

Files::Request.list(path, 
  page: 1, 
  per_page: 1, 
  mine: true
)
```

```php
\Files\Files::setApiKey('YOUR_API_KEY');

\Files\Request::list($path, array(
  'page' => 1, 
  'per_page' => 1, 
  'mine' => true
));
```

> Example Response

```json
[
  {
    "id": 1,
    "path": "",
    "source": "",
    "destination": "",
    "automation_id": "",
    "user_display_name": ""
  }
]
```

```xml
<?xml version="1.0" encoding="UTF-8"?>
<requests type="array">
  <request>
    <id type="integer">1</id>
    <path></path>
    <source></source>
    <destination></destination>
    <automation_id></automation_id>
    <user_display_name></user_display_name>
  </request>
</requests>

```


### HTTPS Request

`GET /requests`

### Authentication Required

Available to all authenticated keys or sessions.



### Request Parameters

Parameter | Description
--------- | --------- | -----------
page *int64*  | Current page number. 
per_page *int64*  | Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended). 
action *string*  | Deprecated: If set to `count` returns a count of matching records rather than the records themselves. 
mine *boolean*  | Only show requests of the current user?  (Defaults to true if current user is not a site admin.) 
path *string*  | Path to show requests for.  If omitted, shows all paths. Send `/` to represent the root directory. 
## List Requests


> Example Request

```shell--json
curl "https://app.files.com/api/rest/v1/requests/folders/{path}?page=1&per_page=1&mine=true" \
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```shell--xml
curl "https://app.files.com/api/rest/v1/requests/folders/{path}?page=1&per_page=1&mine=true" \
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```ruby
Files.api_key = 'YOUR_API_KEY'

request = Files::Request.find(path)
request.folders(
  page: 1,
  per_page: 1,
  mine: true
)
```

```php
\Files\Files::setApiKey('YOUR_API_KEY');

$request = \Files\Request->find(1);
$request->folders(array(
  'page' => 1, 
  'per_page' => 1, 
  'mine' => true
));
```

> Example Response

```json
[
  {
    "id": 1,
    "path": "",
    "source": "",
    "destination": "",
    "automation_id": "",
    "user_display_name": ""
  }
]
```

```xml
<?xml version="1.0" encoding="UTF-8"?>
<requests type="array">
  <request>
    <id type="integer">1</id>
    <path></path>
    <source></source>
    <destination></destination>
    <automation_id></automation_id>
    <user_display_name></user_display_name>
  </request>
</requests>

```


### HTTPS Request

`GET /requests/folders/?*path`

### Authentication Required

Available to all authenticated keys or sessions.



### Request Parameters

Parameter | Description
--------- | --------- | -----------
page *int64*  | Current page number. 
per_page *int64*  | Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended). 
action *string*  | Deprecated: If set to `count` returns a count of matching records rather than the records themselves. 
mine *boolean*  | Only show requests of the current user?  (Defaults to true if current user is not a site admin.) 
path *string*  | Path to show requests for.  If omitted, shows all paths. Send `/` to represent the root directory. 
## Create Request


> Example Request

```shell--json
curl https://app.files.com/api/rest/v1/requests.json \
  -X POST \
  -H 'Content-Type: application/json' \
  -d '{"destination":"destination"}' \
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```shell--xml
curl https://app.files.com/api/rest/v1/requests.xml \
  -X POST \
  -H 'Content-Type: application/xml' \
  -d '<request>
       <destination>destination</destination>
     </request>'
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```ruby
Files.api_key = 'YOUR_API_KEY'

Files::Request.create(path, 
  destination: "destination"
)
```

```php
\Files\Files::setApiKey('YOUR_API_KEY');

\Files\Request::create($path, array(
  'destination' => "destination"
));
```

> Example Response

```json
{
  "id": 1,
  "path": "",
  "source": "",
  "destination": "",
  "automation_id": "",
  "user_display_name": ""
}
```

```xml
<?xml version="1.0" encoding="UTF-8"?>
<request>
  <id type="integer">1</id>
  <path></path>
  <source></source>
  <destination></destination>
  <automation_id></automation_id>
  <user_display_name></user_display_name>
</request>

```


### HTTPS Request

`POST /requests`

### Authentication Required

Available to all authenticated keys or sessions.



### Request Parameters

Parameter | Description
--------- | --------- | -----------
path *string* **Required** | Folder path on which to request the file. 
destination *string* **Required** | Destination filename (without extension) to request. 
user_ids *string*  | A list of user IDs to request the file from. If sent as a string, it should be comma-delimited. 
group_ids *string*  | A list of group IDs to request the file from. If sent as a string, it should be comma-delimited. 
## Delete Request


> Example Request

```shell--json
curl https://app.files.com/api/rest/v1/requests/{id}.json \
  -X DELETE \
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```shell--xml
curl https://app.files.com/api/rest/v1/requests/{id}.xml \
  -X DELETE \
  -H 'X-FilesAPI-Key: YOUR_API_KEY'
```

```ruby
Files.api_key = 'YOUR_API_KEY'

Files::Request.delete(id)
```

```php
\Files\Files::setApiKey('YOUR_API_KEY');

\Files\Request::delete($id);
```

> Example Response

```json
No response.
```

```xml
No response.
```


### HTTPS Request

`DELETE /requests/{id}`

### Authentication Required

Available to all authenticated keys or sessions.



### Request Parameters

Parameter | Description
--------- | --------- | -----------
id *int64* **Required** | Request ID. 

